import { CacheType, Client, Interaction, ModalSubmitInteraction, TextChannel } from "discord.js";
import CommandType from "../utils/enum/CommandType";
import { aide } from "./aide";
import { edt } from "./edt";
import { info } from "./info";
import { wifi } from "./wifi";

export default async (interaction: any | Interaction<CacheType> | ModalSubmitInteraction<CacheType>, client: Client, version: string, callDate: Date, uptime: Date): Promise<void> => {
    const commandType = interaction.isCommand() ? CommandType.COMMAND : CommandType.BUTTON;
    const commandName = commandType == CommandType.COMMAND ?
        interaction.commandName.toLowerCase() : interaction.customId.toLowerCase();

    try {
        switch (true) {
            case /^aide$/.test(commandName):
                await aide({ interaction: interaction, version: version });
                return;
            case /^info$/.test(commandName):
                await info({ interaction: interaction, version: version, time: callDate, botUptime: uptime });
                return;
            case /^wifi$/.test(commandName):
                await wifi({ interaction: interaction, version: version });
                return;
            case /^edt$/.test(commandName):
                await edt({
                    weekNum: interaction.options.get('semaine').value,
                    typeNum: interaction.options.get('type')?.value,
                    interaction: interaction,
                    type: commandType,
                    client,
                });
                return;
            case /^edt[0-9]+$/.test(commandName):
                await edt({ weekNum: commandName.replace('edt', ''), interaction: interaction, type: commandType, client });
                return;
            // case /stats/.test(commandName):
            //     if (interaction.options?._subcommand == "devoirs") {
            //         return await devstats({ interaction: interaction, version: version });
            //     }
            //     await stats({ interaction: interaction, client: client, version: version, type: commandType });
            //     return;
            default:
                await interaction?.deferUpdate();
                return;
        }
    } catch (err: any) {
        const chan = client.channels.cache.get(process.env.CHNL_ERROR);
        if (chan instanceof TextChannel) chan.send(`Error CMD[${commandName}|${commandType}] was generated by <@${interaction.author?.id}>-${interaction.author?.id}-${interaction.author?.username}#${interaction.author?.discriminator}\n\`\`\`${err}\`\`\``).catch(() => {

        });
        console.error(`Error CMD[${commandName}|${commandType}] was generated by <@${interaction.author?.id}>-${interaction.author?.id}-${interaction.author?.username}#${interaction.author?.discriminator}:`, err);
    }
};